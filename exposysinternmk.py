# -*- coding: utf-8 -*-
"""EXPOSYSINTERNMK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jXZgin7zIXeUIEjouYx7aC1TM2C9ysoU

# **EXPOSYS DATALABS DATASCIENCE INTERNSHIP**

**DONE** **BY** :-**MANOJ KUMAR M**

**PH NO** :- **9176064784**

**EMAIL** :- **manojkmohan5@gmail.com**

**IMPORTING THE REQUIRED LIBRARIES** **:-**
"""

import numpy as np #importing the numpy library
import pandas as pd #importing the pandas library
import matplotlib.pyplot as plt #importing the matplob library
import seaborn as sns #importing seaborn library
import os   #importing os module
import sklearn.cluster as Kmeans

pro = pd.read_csv("dataset.csv") #reading the datasets

"""**ANALYSIS :-**"""

pro.dtypes #displaying the datatypes

pro.head() #displayin the first five rows

pro.tail() #displaying the last five rows

pro.value_counts() #counting the total value counts

pro.columns #showing the columns

pro.isnull #checking the null values

"""**DATA VISUALIZATION** **:-**"""

sns.countplot(x='Gender',data=pro) #visualization the gender data

pro.plot() #general visualization using matplot
plt.show()

sns.distplot(pro['Annual Income (k$)'], bins = 20, kde = True) #visualization using seaborn

sns.violinplot(x='Spending Score (1-100)',data=pro,palette="Set1",saturation=0.75) #visualizing the data of spending score

pro.info() #shows the information of the data set

pro["Annual Income (k$)"].mean #mean of Annual Income (k$)

print(min(pro['Annual Income (k$)'])) #showing the min value of annual income (k$)

print(max(pro['Annual Income (k$)'])) #showing the max value of annual income (k$)

age18_25 = pro.Age[(pro.Age <= 25) & (pro.Age >= 18)] #limiting the age btw 25-18 and visualization
age26_35 = pro.Age[(pro.Age <= 35) & (pro.Age >= 26)]
age36_45 = pro.Age[(pro.Age <= 45) & (pro.Age >= 36)]
age46_55 = pro.Age[(pro.Age <= 55) & (pro.Age >= 46)]
age55above = pro.Age[pro.Age >= 56]

x = ["18-25","26-35","36-45","46-55","55+"]
y = [len(age18_25.values),len(age26_35.values),len(age36_45.values),len(age46_55.values),len(age55above.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=x, y=y, palette="rocket")
plt.title("Number of Customer and Ages")
plt.xlabel("Age")
plt.ylabel("Number of Customer")
plt.show()

ss1_20 = pro["Spending Score (1-100)"][(pro["Spending Score (1-100)"] >= 1) & (pro["Spending Score (1-100)"] <= 20)]
ss21_40 = pro["Spending Score (1-100)"][(pro["Spending Score (1-100)"] >= 21) & (pro["Spending Score (1-100)"] <= 40)]
ss41_60 = pro["Spending Score (1-100)"][(pro["Spending Score (1-100)"] >= 41) & (pro["Spending Score (1-100)"] <= 60)]
ss61_80 = pro["Spending Score (1-100)"][(pro["Spending Score (1-100)"] >= 61) & (pro["Spending Score (1-100)"] <= 80)]
ss81_100 = pro["Spending Score (1-100)"][(pro["Spending Score (1-100)"] >= 81) & (pro["Spending Score (1-100)"] <= 100)]

ssx = ["1-20", "21-40", "41-60", "61-80", "81-100"]
ssy = [len(ss1_20.values), len(ss21_40.values), len(ss41_60.values), len(ss61_80.values), len(ss81_100.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=ssx, y=ssy, palette="nipy_spectral_r")
plt.title("Spending Scores")
plt.xlabel("Score")
plt.ylabel("Number of Customer Having the Score")
plt.show()

from mpl_toolkits.mplot3d import Axes3D #importing the mplot3d library

sns.set_style("white")
fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(pro.Age, pro["Annual Income (k$)"], pro["Spending Score (1-100)"], c='blue', s=60)
ax.view_init(30, 185)
plt.xlabel("Age")
plt.ylabel("Annual Income (k$)")
ax.set_zlabel('Spending Score (1-100)')
plt.show()

pro['Gender'] = np.where(pro['Gender'].str.contains('Male'), 1, 0) #converting catagorical column of gender to numerical

pro.head(10)

"""**K-MEANS CLUSTERING**"""

X1 = pro.loc[:,["Age","Spending Score (1-100)"]].values

from sklearn.cluster import KMeans  #importing the k-means clustering library

wcss = []
for k in range(1,11):
    kmeans = KMeans(n_clusters=k, init="k-means++")
    kmeans.fit(X1)
    wcss.append(kmeans.inertia_)
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss, linewidth=2, color="red", marker ="8")
plt.xlabel("K Value")
plt.xticks(np.arange(1,11,1))
plt.ylabel("WCSS")
plt.show()

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=4)

label  = kmeans.fit_predict(X1)

print(label)

print(kmeans.cluster_centers_)

plt.scatter(X1[:,0], X1[:,1], c=kmeans.labels_, cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], color='black')
plt.title('Cluster of Customers')
plt.xlabel('Age')
plt.ylabel('Spending Score(1-100)')
plt.grid()
plt.show()

X2 = pro.loc[:,["Annual Income (k$)", "Spending Score (1-100)"]].values

from sklearn.cluster import KMeans
wcss = []
for k in range(1,11):
  kmeans = KMeans(n_clusters=k,init="k-means++")
  kmeans.fit(X2)
  wcss.append(kmeans.inertia_)
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss,linewidth=2,color="red",marker="8")
plt.xlabel("K Value")
plt.ylabel("WCSS")
plt.show()

kmeans = KMeans(n_clusters=5)

label = kmeans.fit_predict(X2)

print(label)

print(kmeans.cluster_centers_)

plt.scatter(X2[:,0], X1[:,1], c=kmeans.labels_, cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], color = 'black')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score(1-100)')
plt.show()

"""**THANK YOU**"""